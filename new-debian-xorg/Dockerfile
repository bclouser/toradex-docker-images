FROM bclouser/debian-builder:latest AS build

RUN [ "cross-build-start" ]

### Phase 1: Build the debian packages needed for Armada DRM
RUN mkdir /sandbox
RUN cd /sandbox && git clone git://git.arm.linux.org.uk/xf86-video-armada.git -b unstable-devel \
&& git clone https://github.com/laanwj/etna_viv.git \
&& git clone git://ftp.arm.linux.org.uk/~rmk/libdrm-armada.git

## Build libdrm-armada debian package
RUN cd /sandbox/libdrm-armada && git checkout 607c697d7c403356601cd0d5fa6407b61a45e8ed && cd debian && yes |debuild -us -uc


## Install libdrm (Armada module build depends on it)
RUN cd /sandbox && dpkg -i libdrm-armada2_2.0.3-1_armhf.deb && dpkg -i libdrm-armada-dev_2.0.3-1_armhf.deb \
&& ln -s /usr/lib/arm-linux-gnueabihf/pkgconfig/libdrm_armada.pc /usr/lib/arm-linux-gnueabihf/pkgconfig/libdrm-armada2.pc
ENV PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig
# ^^^ So, this is a hack. The dpkg should be installing a 
# libdrm-armada2.pc on its own... or the package should be named differently.

### Build xf86 armada module package
RUN mkdir /sandbox/xf86-video-armada-patches
COPY /xf86-video-armada-patches/* /sandbox/xf86-video-armada-patches/
RUN cd /sandbox/xf86-video-armada && git checkout e17e4d6db134c4be039e25fa9747882aa3091bb4 && git am /sandbox/xf86-video-armada-patches/*.patch \
&& cd debian && yes |debuild -us -uc

RUN [ "cross-build-end" ]

## Phase 2: Regular package installs
################################################################################
FROM resin/armv7hf-debian:buster
################################################################################

RUN [ "cross-build-start" ]

LABEL io.resin.device-type="apalis-imx6q"

RUN apt-get -y update && apt-get install -y --no-install-recommends \
    apt-utils \
    && apt-mark hold dash && apt-get -y upgrade && apt-mark unhold dash \
    && apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

RUN apt-get -y update && apt-get install -y --no-install-recommends \
    vim-tiny \
    less \
    kmod \
    wget \
    usbutils \
    desktop-base \
    debconf \
    udev \
    && apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

RUN apt-get -y update && apt-get install -y --no-install-recommends \
    xserver-xorg-core \
    xinit \
    xserver-xorg-input-libinput \
    xserver-xorg-video-fbdev \
    dbus-x11 \
    suckless-tools \
    && apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

## Copy over Armada packages from previous context
COPY --from=build /sandbox/*.deb /tmp/

## Install libdrm (Armada module build depends on it)
RUN cd /tmp && dpkg -i libdrm-armada2_2.0.3-1_armhf.deb && dpkg -i libdrm-armada-dev_2.0.3-1_armhf.deb \
&& ln -s /usr/lib/arm-linux-gnueabihf/pkgconfig/libdrm_armada.pc /usr/lib/arm-linux-gnueabihf/pkgconfig/libdrm-armada2.pc
ENV PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig
# ^^^ So, this is a hack. The dpkg should be installing a 
# libdrm-armada2.pc on its own... or the package should be named differently.

# Install Armada xorg modules
RUN cd /tmp && dpkg -i xserver-xorg-video-armada_0.0.0-1_armhf.deb

RUN rm -rf /tmp
COPY xorg.conf.* /etc/X11/

COPY entry.sh /usr/bin/entry.sh
COPY launch.service /etc/systemd/system/launch.service

### Actually setup xorg to start from systemd by default
COPY xorg.service /etc/systemd/system/xorg.service

### Add our own custom init script and systemd unit file
COPY config-xorg.sh /usr/bin/config-xorg.sh
COPY config-xorg.service /etc/systemd/system/config-xorg.service

RUN systemctl enable launch.service && systemctl enable xorg.service && systemctl enable config-xorg.service

ENV DISPLAY :0

ENTRYPOINT ["/usr/bin/entry.sh"]

RUN [ "cross-build-end" ]